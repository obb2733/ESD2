-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\sobelFilter2024a\Subsystem1.vhd
-- Created: 2025-04-15 15:58:44
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Subsystem1
-- Source Path: sobelFilter2024a/conv_core/color_correct_core/Subsystem1
-- Hierarchy Level: 2
-- Model version: 8.65
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.conv_core_pkg.ALL;

ENTITY Subsystem1 IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        channel_in_0                      :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        channel_in_1                      :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        channel_in_2                      :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        Enable                            :   IN    std_logic;
        Video_out_0                       :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        Video_out_1                       :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        Video_out_2                       :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
        );
END Subsystem1;


ARCHITECTURE rtl OF Subsystem1 IS

  -- Signals
  SIGNAL enb_gated                        : std_logic;
  SIGNAL alphavalid                       : std_logic;
  SIGNAL Check_For_White_out1             : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL channel_in_0_unsigned            : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL channel_in_1_unsigned            : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Max1_stage1_1_val                : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL channel_in_2_unsigned            : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Max1_stage2_val                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Max2_stage1_1_val                : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Max2_stage2_val                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Subtract_sub_cast                : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL Subtract_sub_cast_1              : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL Subtract_out1                    : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL GreaterThanOrEqual_cast          : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL GreaterThanOrEqual_out1          : std_logic;
  SIGNAL Brightness_Check_out1            : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL R_out1                           : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL G_out1                           : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL GreaterThanOrEqual1_out1         : std_logic;
  SIGNAL AND_out1                         : std_logic;
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL channel_in                       : vector_of_unsigned8(0 TO 2);  -- uint8 [3]
  SIGNAL B_out1                           : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Mux_out1                         : vector_of_unsigned8(0 TO 2);  -- uint8 [3]
  SIGNAL Switch_out1                      : vector_of_unsigned8(0 TO 2);  -- uint8 [3]
  SIGNAL Switch_out1_bypass               : vector_of_unsigned8(0 TO 2);  -- uint8 [3]
  SIGNAL Switch_out1_last_value           : vector_of_unsigned8(0 TO 2);  -- uint8 [3]

BEGIN

  alphavalid <= Enable;

  enb_gated <= alphavalid AND enb;

  Check_For_White_out1 <= to_unsigned(16#4B#, 8);

  channel_in_0_unsigned <= unsigned(channel_in_0);

  channel_in_1_unsigned <= unsigned(channel_in_1);

  ---- Tree max implementation ----
  
  Max1_stage1_1_val <= channel_in_0_unsigned WHEN channel_in_0_unsigned >= channel_in_1_unsigned ELSE
      channel_in_1_unsigned;

  channel_in_2_unsigned <= unsigned(channel_in_2);

  
  Max1_stage2_val <= Max1_stage1_1_val WHEN Max1_stage1_1_val >= channel_in_2_unsigned ELSE
      channel_in_2_unsigned;

  ---- Tree min implementation ----
  
  Max2_stage1_1_val <= channel_in_0_unsigned WHEN channel_in_0_unsigned <= channel_in_1_unsigned ELSE
      channel_in_1_unsigned;

  
  Max2_stage2_val <= Max2_stage1_1_val WHEN Max2_stage1_1_val <= channel_in_2_unsigned ELSE
      channel_in_2_unsigned;

  Subtract_sub_cast <= signed(resize(Max1_stage2_val, 9));
  Subtract_sub_cast_1 <= signed(resize(Max2_stage2_val, 9));
  Subtract_out1 <= Subtract_sub_cast - Subtract_sub_cast_1;

  GreaterThanOrEqual_cast <= signed(resize(Check_For_White_out1, 9));
  
  GreaterThanOrEqual_out1 <= '1' WHEN GreaterThanOrEqual_cast >= Subtract_out1 ELSE
      '0';

  Brightness_Check_out1 <= to_unsigned(16#32#, 8);

  R_out1 <= to_unsigned(16#63#, 8);

  G_out1 <= to_unsigned(16#3B#, 8);

  
  GreaterThanOrEqual1_out1 <= '1' WHEN Max2_stage2_val >= Brightness_Check_out1 ELSE
      '0';

  AND_out1 <= GreaterThanOrEqual_out1 AND GreaterThanOrEqual1_out1;

  
  switch_compare_1 <= '1' WHEN AND_out1 > '0' ELSE
      '0';

  channel_in(0) <= unsigned(channel_in_0);
  channel_in(1) <= unsigned(channel_in_1);
  channel_in(2) <= unsigned(channel_in_2);

  B_out1 <= to_unsigned(16#19#, 8);

  Mux_out1(0) <= R_out1;
  Mux_out1(1) <= G_out1;
  Mux_out1(2) <= B_out1;

  
  Switch_out1 <= channel_in WHEN switch_compare_1 = '0' ELSE
      Mux_out1;

  Video_out_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Switch_out1_last_value <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Switch_out1_last_value <= Switch_out1_bypass;
      END IF;
    END IF;
  END PROCESS Video_out_bypass_process;


  
  Switch_out1_bypass <= Switch_out1_last_value WHEN alphavalid = '0' ELSE
      Switch_out1;

  Video_out_0 <= std_logic_vector(Switch_out1_bypass(0));

  Video_out_1 <= std_logic_vector(Switch_out1_bypass(1));

  Video_out_2 <= std_logic_vector(Switch_out1_bypass(2));

END rtl;

