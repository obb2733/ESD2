-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\sobelFilter2024a\Subsystem2.vhd
-- Created: 2025-04-09 17:29:30
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Subsystem2
-- Source Path: sobelFilter2024a/conv_core/sqrt_threshold/Subsystem2
-- Hierarchy Level: 2
-- Model version: 8.45
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Subsystem2 IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        channel_horz                      :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        channel_in_vert                   :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        Enable                            :   IN    std_logic;
        Video_out                         :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
        );
END Subsystem2;


ARCHITECTURE rtl OF Subsystem2 IS

  -- Component Declarations
  COMPONENT slicer1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          channel_in                      :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          out_5                           :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
          );
  END COMPONENT;

  COMPONENT slicer_block2
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          channel_in                      :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          out_5                           :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : slicer1
    USE ENTITY work.slicer1(rtl);

  FOR ALL : slicer_block2
    USE ENTITY work.slicer_block2(rtl);

  -- Signals
  SIGNAL enb_gated                        : std_logic;
  SIGNAL alphavalid                       : std_logic;
  SIGNAL slicer1_out5                     : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL slicer1_out5_unsigned            : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Product15_out1                   : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Delay16_out1                     : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL slicer_out5                      : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL slicer_out5_unsigned             : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Product6_out1                    : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Delay3_out1                      : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Sum4_out1                        : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL Constant_out1                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Product19_out1                   : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Relational_Operator_out1         : std_logic;
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL Constant1_out1                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Product20_out1                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay2_out1                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay2_out1_bypass               : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay2_out1_last_value           : unsigned(7 DOWNTO 0);  -- uint8

BEGIN
  -- If we have time come back and see if you can design it to average with 
  -- nearby 8 pixels and use that as the threshold instead of a constant. For
  -- now though this is fine.

  u_slicer1 : slicer1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb_gated,
              channel_in => channel_in_vert,  -- uint8
              out_5 => slicer1_out5  -- uint8
              );

  u_slicer : slicer_block2
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb_gated,
              channel_in => channel_horz,  -- uint8
              out_5 => slicer_out5  -- uint8
              );

  alphavalid <= Enable;

  enb_gated <= alphavalid AND enb;

  slicer1_out5_unsigned <= unsigned(slicer1_out5);

  Product15_out1 <= slicer1_out5_unsigned * slicer1_out5_unsigned;

  Delay16_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay16_out1 <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay16_out1 <= Product15_out1;
      END IF;
    END IF;
  END PROCESS Delay16_process;


  slicer_out5_unsigned <= unsigned(slicer_out5);

  Product6_out1 <= slicer_out5_unsigned * slicer_out5_unsigned;

  Delay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_out1 <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay3_out1 <= Product6_out1;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  Sum4_out1 <= resize(Delay16_out1, 17) + resize(Delay3_out1, 17);

  Constant_out1 <= to_unsigned(16#7D#, 8);

  Product19_out1 <= Constant_out1 * Constant_out1;

  
  Relational_Operator_out1 <= '1' WHEN Sum4_out1 > resize(Product19_out1, 17) ELSE
      '0';

  Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay1_out1 <= Relational_Operator_out1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  Constant1_out1 <= to_unsigned(16#FF#, 8);

  
  Product20_out1 <= Constant1_out1 WHEN Delay1_out1 = '1' ELSE
      to_unsigned(16#00#, 8);

  Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_out1 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay2_out1 <= Product20_out1;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  Video_out_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_out1_last_value <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay2_out1_last_value <= Delay2_out1_bypass;
      END IF;
    END IF;
  END PROCESS Video_out_bypass_process;


  
  Delay2_out1_bypass <= Delay2_out1_last_value WHEN alphavalid = '0' ELSE
      Delay2_out1;

  Video_out <= std_logic_vector(Delay2_out1_bypass);

END rtl;

