-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\sobelFilter2024a\normalize_image.vhd
-- Created: 2025-04-15 15:58:44
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: normalize_image
-- Source Path: sobelFilter2024a/conv_core/normalize image
-- Hierarchy Level: 1
-- Model version: 8.65
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY normalize_image IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        Video_in                          :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        ctrl_hStart                       :   IN    std_logic;
        ctrl_hEnd                         :   IN    std_logic;
        ctrl_vStart                       :   IN    std_logic;
        ctrl_vEnd                         :   IN    std_logic;
        ctrl_valid                        :   IN    std_logic;
        Video_out                         :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        valid_out_hStart                  :   OUT   std_logic;
        valid_out_hEnd                    :   OUT   std_logic;
        valid_out_vStart                  :   OUT   std_logic;
        valid_out_vEnd                    :   OUT   std_logic;
        valid_out_valid                   :   OUT   std_logic
        );
END normalize_image;


ARCHITECTURE rtl OF normalize_image IS

  -- Component Declarations
  COMPONENT Subsystem1_block2
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          channel_in                      :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          Enable                          :   IN    std_logic;
          Video_out                       :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Subsystem1_block2
    USE ENTITY work.Subsystem1_block2(rtl);

  -- Signals
  SIGNAL valid                            : std_logic;
  SIGNAL Subsystem1_out1                  : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL alpha_reg                        : std_logic_vector(3 DOWNTO 0);  -- ufix1 [4]
  SIGNAL Delay3_out1_hStart               : std_logic;
  SIGNAL alpha_reg_1                      : std_logic_vector(3 DOWNTO 0);  -- ufix1 [4]
  SIGNAL Delay3_out1_hEnd                 : std_logic;
  SIGNAL alpha_reg_2                      : std_logic_vector(3 DOWNTO 0);  -- ufix1 [4]
  SIGNAL Delay3_out1_vStart               : std_logic;
  SIGNAL alpha_reg_3                      : std_logic_vector(3 DOWNTO 0);  -- ufix1 [4]
  SIGNAL Delay3_out1_vEnd                 : std_logic;
  SIGNAL alpha_reg_4                      : std_logic_vector(3 DOWNTO 0);  -- ufix1 [4]
  SIGNAL Delay3_out1_valid                : std_logic;

BEGIN
  u_Subsystem1 : Subsystem1_block2
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              channel_in => Video_in,  -- uint8
              Enable => valid,
              Video_out => Subsystem1_out1  -- uint8
              );

  valid <= ctrl_valid;

  c_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      alpha_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        alpha_reg(0) <= ctrl_hStart;
        alpha_reg(3 DOWNTO 1) <= alpha_reg(2 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS c_process;

  Delay3_out1_hStart <= alpha_reg(3);

  c_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      alpha_reg_1 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        alpha_reg_1(0) <= ctrl_hEnd;
        alpha_reg_1(3 DOWNTO 1) <= alpha_reg_1(2 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS c_1_process;

  Delay3_out1_hEnd <= alpha_reg_1(3);

  c_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      alpha_reg_2 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        alpha_reg_2(0) <= ctrl_vStart;
        alpha_reg_2(3 DOWNTO 1) <= alpha_reg_2(2 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS c_2_process;

  Delay3_out1_vStart <= alpha_reg_2(3);

  c_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      alpha_reg_3 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        alpha_reg_3(0) <= ctrl_vEnd;
        alpha_reg_3(3 DOWNTO 1) <= alpha_reg_3(2 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS c_3_process;

  Delay3_out1_vEnd <= alpha_reg_3(3);

  c_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      alpha_reg_4 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        alpha_reg_4(0) <= ctrl_valid;
        alpha_reg_4(3 DOWNTO 1) <= alpha_reg_4(2 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS c_4_process;

  Delay3_out1_valid <= alpha_reg_4(3);

  Video_out <= Subsystem1_out1;

  valid_out_hStart <= Delay3_out1_hStart;

  valid_out_hEnd <= Delay3_out1_hEnd;

  valid_out_vStart <= Delay3_out1_vStart;

  valid_out_vEnd <= Delay3_out1_vEnd;

  valid_out_valid <= Delay3_out1_valid;

END rtl;

