-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\sobelFilter2024a\conv_core_tb.vhd
-- Created: 2025-04-09 17:31:03
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 2.77039e-06
-- Target subsystem base rate: 2.77039e-06
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: conv_core_tb
-- Source Path: 
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_textio.ALL;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
LIBRARY STD;
USE STD.textio.ALL;
LIBRARY work;
USE work.conv_core_pkg.ALL;
USE work.conv_core_tb_pkg.ALL;

ENTITY conv_core_tb IS
END conv_core_tb;


ARCHITECTURE rtl OF conv_core_tb IS

  -- Component Declarations
  COMPONENT conv_core
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          Video_in_0                      :   IN    std_logic_vector(63 DOWNTO 0);  -- ufix64
          Video_in_1                      :   IN    std_logic_vector(63 DOWNTO 0);  -- ufix64
          Video_in_2                      :   IN    std_logic_vector(63 DOWNTO 0);  -- ufix64
          ctrl_hStart                     :   IN    std_logic;
          ctrl_hEnd                       :   IN    std_logic;
          ctrl_vStart                     :   IN    std_logic;
          ctrl_vEnd                       :   IN    std_logic;
          ctrl_valid                      :   IN    std_logic;
          ce_out                          :   OUT   std_logic;
          Video_out                       :   OUT   std_logic_vector(63 DOWNTO 0);  -- ufix64
          valid_out_hStart                :   OUT   std_logic;
          valid_out_hEnd                  :   OUT   std_logic;
          valid_out_vStart                :   OUT   std_logic;
          valid_out_vEnd                  :   OUT   std_logic;
          valid_out_valid                 :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : conv_core
    USE ENTITY work.conv_core(rtl);

  -- Signals
  SIGNAL clk                              : std_logic;
  SIGNAL reset                            : std_logic;
  SIGNAL clk_enable                       : std_logic;
  SIGNAL rawData_ctrl_valid               : std_logic;
  SIGNAL valid_out_valid_done             : std_logic;  -- ufix1
  SIGNAL rdEnb                            : std_logic;
  SIGNAL valid_out_valid_done_enb         : std_logic;  -- ufix1
  SIGNAL Video_out_addr                   : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL valid_out_valid_lastAddr         : std_logic;  -- ufix1
  SIGNAL resetn                           : std_logic;
  SIGNAL check6_done                      : std_logic;  -- ufix1
  SIGNAL valid_out_vEnd_done              : std_logic;  -- ufix1
  SIGNAL valid_out_vEnd_done_enb          : std_logic;  -- ufix1
  SIGNAL valid_out_vEnd_lastAddr          : std_logic;  -- ufix1
  SIGNAL check5_done                      : std_logic;  -- ufix1
  SIGNAL valid_out_vStart_done            : std_logic;  -- ufix1
  SIGNAL valid_out_vStart_done_enb        : std_logic;  -- ufix1
  SIGNAL valid_out_vStart_lastAddr        : std_logic;  -- ufix1
  SIGNAL check4_done                      : std_logic;  -- ufix1
  SIGNAL valid_out_hEnd_done              : std_logic;  -- ufix1
  SIGNAL valid_out_hEnd_done_enb          : std_logic;  -- ufix1
  SIGNAL valid_out_hEnd_lastAddr          : std_logic;  -- ufix1
  SIGNAL check3_done                      : std_logic;  -- ufix1
  SIGNAL valid_out_hStart_done            : std_logic;  -- ufix1
  SIGNAL valid_out_hStart_done_enb        : std_logic;  -- ufix1
  SIGNAL valid_out_hStart_lastAddr        : std_logic;  -- ufix1
  SIGNAL check2_done                      : std_logic;  -- ufix1
  SIGNAL Video_out_done                   : std_logic;  -- ufix1
  SIGNAL Video_out_done_enb               : std_logic;  -- ufix1
  SIGNAL Video_out_active                 : std_logic;  -- ufix1
  SIGNAL holdData_ctrl_valid              : std_logic;
  SIGNAL ctrl_valid_offset                : std_logic;
  SIGNAL ctrl_valid_1                     : std_logic;
  SIGNAL Bit_Concat_out1_addr             : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL Frame_To_Pixels3_out2_3_bus_addr_delay_1 : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL tb_enb_delay                     : std_logic;
  SIGNAL rawData_ctrl_vEnd                : std_logic;
  SIGNAL holdData_ctrl_vEnd               : std_logic;
  SIGNAL ctrl_vEnd_offset                 : std_logic;
  SIGNAL ctrl_vEnd                        : std_logic;
  SIGNAL Frame_To_Pixels3_out2_2_bus_addr_delay_1 : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL rawData_ctrl_vStart              : std_logic;
  SIGNAL holdData_ctrl_vStart             : std_logic;
  SIGNAL ctrl_vStart_offset               : std_logic;
  SIGNAL ctrl_vStart                      : std_logic;
  SIGNAL Frame_To_Pixels3_out2_1_bus_addr_delay_1 : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL rawData_ctrl_hEnd                : std_logic;
  SIGNAL holdData_ctrl_hEnd               : std_logic;
  SIGNAL ctrl_hEnd_offset                 : std_logic;
  SIGNAL ctrl_hEnd                        : std_logic;
  SIGNAL Frame_To_Pixels3_out2_bus_addr_delay_1 : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL rawData_ctrl_hStart              : std_logic;
  SIGNAL holdData_ctrl_hStart             : std_logic;
  SIGNAL ctrl_hStart_offset               : std_logic;
  SIGNAL ctrl_hStart                      : std_logic;
  SIGNAL Bit_Concat_out1_addr_delay       : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL rawData_Video_in_2               : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL holdData_Video_in_2              : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL Video_in_2_offset                : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL Video_in_2                       : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL Video_in_2_1                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL rawData_Video_in_1               : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL holdData_Video_in_1              : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL Video_in_1_offset                : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL Video_in_1                       : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL Video_in_1_1                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Bit_Concat_out1_active           : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_enb              : std_logic;  -- ufix1
  SIGNAL rawData_Video_in_0               : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL holdData_Video_in_0              : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL Video_in_0_offset                : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL Video_in_0                       : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL Video_in_0_1                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL snkDone                          : std_logic;
  SIGNAL snkDonen                         : std_logic;
  SIGNAL tb_enb                           : std_logic;
  SIGNAL ce_out                           : std_logic;
  SIGNAL Video_out                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL valid_out_hStart                 : std_logic;
  SIGNAL valid_out_hEnd                   : std_logic;
  SIGNAL valid_out_vStart                 : std_logic;
  SIGNAL valid_out_vEnd                   : std_logic;
  SIGNAL valid_out_valid                  : std_logic;
  SIGNAL Video_out_enb                    : std_logic;  -- ufix1
  SIGNAL Video_out_lastAddr               : std_logic;  -- ufix1
  SIGNAL check1_done                      : std_logic;  -- ufix1
  SIGNAL Video_out_unsigned               : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL Video_out_addr_delay_1           : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL Video_out_expected               : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL Video_out_ref                    : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL Video_out_testFailure            : std_logic;  -- ufix1
  SIGNAL valid_out_hStart_addr_delay_1    : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL valid_out_hStart_expected        : std_logic;
  SIGNAL valid_out_hStart_ref             : std_logic;
  SIGNAL valid_out_hStart_testFailure     : std_logic;  -- ufix1
  SIGNAL valid_out_hEnd_addr_delay_1      : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL valid_out_hEnd_expected          : std_logic;
  SIGNAL valid_out_hEnd_ref               : std_logic;
  SIGNAL valid_out_hEnd_testFailure       : std_logic;  -- ufix1
  SIGNAL valid_out_vStart_addr_delay_1    : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL valid_out_vStart_expected        : std_logic;
  SIGNAL valid_out_vStart_ref             : std_logic;
  SIGNAL valid_out_vStart_testFailure     : std_logic;  -- ufix1
  SIGNAL valid_out_vEnd_addr_delay_1      : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL valid_out_vEnd_expected          : std_logic;
  SIGNAL valid_out_vEnd_ref               : std_logic;
  SIGNAL valid_out_vEnd_testFailure       : std_logic;  -- ufix1
  SIGNAL valid_out_valid_addr_delay_1     : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL valid_out_valid_expected         : std_logic;
  SIGNAL valid_out_valid_ref              : std_logic;
  SIGNAL valid_out_valid_testFailure      : std_logic;  -- ufix1
  SIGNAL testFailure                      : std_logic;  -- ufix1

BEGIN
  u_conv_core : conv_core
    PORT MAP( clk => clk,
              reset => reset,
              clk_enable => clk_enable,
              Video_in_0 => Video_in_0_1,  -- ufix64
              Video_in_1 => Video_in_1_1,  -- ufix64
              Video_in_2 => Video_in_2_1,  -- ufix64
              ctrl_hStart => ctrl_hStart,
              ctrl_hEnd => ctrl_hEnd,
              ctrl_vStart => ctrl_vStart,
              ctrl_vEnd => ctrl_vEnd,
              ctrl_valid => ctrl_valid_1,
              ce_out => ce_out,
              Video_out => Video_out,  -- ufix64
              valid_out_hStart => valid_out_hStart,
              valid_out_hEnd => valid_out_hEnd,
              valid_out_vStart => valid_out_vStart,
              valid_out_vEnd => valid_out_vEnd,
              valid_out_valid => valid_out_valid
              );

  -- Data source for ctrl_valid
  rawData_ctrl_valid <= '1';

  valid_out_valid_done_enb <= valid_out_valid_done AND rdEnb;

  
  valid_out_valid_lastAddr <= '1' WHEN Video_out_addr >= to_unsigned(16#B0400#, 20) ELSE
      '0';

  valid_out_valid_done <= valid_out_valid_lastAddr AND resetn;

  -- Delay to allow last sim cycle to complete
  checkDone_6_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      check6_done <= '0';
    ELSIF clk'event AND clk = '1' THEN
      IF valid_out_valid_done_enb = '1' THEN
        check6_done <= valid_out_valid_done;
      END IF;
    END IF;
  END PROCESS checkDone_6_process;

  valid_out_vEnd_done_enb <= valid_out_vEnd_done AND rdEnb;

  
  valid_out_vEnd_lastAddr <= '1' WHEN Video_out_addr >= to_unsigned(16#B0400#, 20) ELSE
      '0';

  valid_out_vEnd_done <= valid_out_vEnd_lastAddr AND resetn;

  -- Delay to allow last sim cycle to complete
  checkDone_5_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      check5_done <= '0';
    ELSIF clk'event AND clk = '1' THEN
      IF valid_out_vEnd_done_enb = '1' THEN
        check5_done <= valid_out_vEnd_done;
      END IF;
    END IF;
  END PROCESS checkDone_5_process;

  valid_out_vStart_done_enb <= valid_out_vStart_done AND rdEnb;

  
  valid_out_vStart_lastAddr <= '1' WHEN Video_out_addr >= to_unsigned(16#B0400#, 20) ELSE
      '0';

  valid_out_vStart_done <= valid_out_vStart_lastAddr AND resetn;

  -- Delay to allow last sim cycle to complete
  checkDone_4_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      check4_done <= '0';
    ELSIF clk'event AND clk = '1' THEN
      IF valid_out_vStart_done_enb = '1' THEN
        check4_done <= valid_out_vStart_done;
      END IF;
    END IF;
  END PROCESS checkDone_4_process;

  valid_out_hEnd_done_enb <= valid_out_hEnd_done AND rdEnb;

  
  valid_out_hEnd_lastAddr <= '1' WHEN Video_out_addr >= to_unsigned(16#B0400#, 20) ELSE
      '0';

  valid_out_hEnd_done <= valid_out_hEnd_lastAddr AND resetn;

  -- Delay to allow last sim cycle to complete
  checkDone_3_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      check3_done <= '0';
    ELSIF clk'event AND clk = '1' THEN
      IF valid_out_hEnd_done_enb = '1' THEN
        check3_done <= valid_out_hEnd_done;
      END IF;
    END IF;
  END PROCESS checkDone_3_process;

  valid_out_hStart_done_enb <= valid_out_hStart_done AND rdEnb;

  
  valid_out_hStart_lastAddr <= '1' WHEN Video_out_addr >= to_unsigned(16#B0400#, 20) ELSE
      '0';

  valid_out_hStart_done <= valid_out_hStart_lastAddr AND resetn;

  -- Delay to allow last sim cycle to complete
  checkDone_2_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      check2_done <= '0';
    ELSIF clk'event AND clk = '1' THEN
      IF valid_out_hStart_done_enb = '1' THEN
        check2_done <= valid_out_hStart_done;
      END IF;
    END IF;
  END PROCESS checkDone_2_process;

  Video_out_done_enb <= Video_out_done AND rdEnb;

  
  Video_out_active <= '1' WHEN Video_out_addr /= to_unsigned(16#B0400#, 20) ELSE
      '0';

  -- holdData reg for Frame_To_Pixels3_out2_4_bus
  stimuli_Frame_To_Pixels3_out2_4_bus_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      holdData_ctrl_valid <= 'X';
    ELSIF clk'event AND clk = '1' THEN
      holdData_ctrl_valid <= rawData_ctrl_valid;
    END IF;
  END PROCESS stimuli_Frame_To_Pixels3_out2_4_bus_process;

  stimuli_Frame_To_Pixels3_out2_4_bus_1: PROCESS (rawData_ctrl_valid, rdEnb)
  BEGIN
    IF rdEnb = '0' THEN
      ctrl_valid_offset <= holdData_ctrl_valid;
    ELSE
      ctrl_valid_offset <= rawData_ctrl_valid;
    END IF;
  END PROCESS stimuli_Frame_To_Pixels3_out2_4_bus_1;

  ctrl_valid_1 <= ctrl_valid_offset AFTER 2 ns;

  Frame_To_Pixels3_out2_3_bus_addr_delay_1 <= Bit_Concat_out1_addr AFTER 1 ns;

  -- Data source for ctrl_vEnd
  ctrl_vEnd_fileread: PROCESS (Frame_To_Pixels3_out2_3_bus_addr_delay_1, tb_enb_delay, rdEnb)
    FILE fp: TEXT open READ_MODE is "ctrl_vEnd.dat";
    VARIABLE l: LINE;
    VARIABLE read_data: std_logic;

  BEGIN
    IF tb_enb_delay /= '1' THEN
    ELSIF rdEnb = '1' AND NOT ENDFILE(fp) THEN
      READLINE(fp, l);
      READ(l, read_data);
    END IF;
    rawData_ctrl_vEnd <= read_data;
  END PROCESS ctrl_vEnd_fileread;

  -- holdData reg for Frame_To_Pixels3_out2_3_bus
  stimuli_Frame_To_Pixels3_out2_3_bus_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      holdData_ctrl_vEnd <= 'X';
    ELSIF clk'event AND clk = '1' THEN
      holdData_ctrl_vEnd <= rawData_ctrl_vEnd;
    END IF;
  END PROCESS stimuli_Frame_To_Pixels3_out2_3_bus_process;

  stimuli_Frame_To_Pixels3_out2_3_bus_1: PROCESS (rawData_ctrl_vEnd, rdEnb)
  BEGIN
    IF rdEnb = '0' THEN
      ctrl_vEnd_offset <= holdData_ctrl_vEnd;
    ELSE
      ctrl_vEnd_offset <= rawData_ctrl_vEnd;
    END IF;
  END PROCESS stimuli_Frame_To_Pixels3_out2_3_bus_1;

  ctrl_vEnd <= ctrl_vEnd_offset AFTER 2 ns;

  Frame_To_Pixels3_out2_2_bus_addr_delay_1 <= Bit_Concat_out1_addr AFTER 1 ns;

  -- Data source for ctrl_vStart
  ctrl_vStart_fileread: PROCESS (Frame_To_Pixels3_out2_2_bus_addr_delay_1, tb_enb_delay, rdEnb)
    FILE fp: TEXT open READ_MODE is "ctrl_vStart.dat";
    VARIABLE l: LINE;
    VARIABLE read_data: std_logic;

  BEGIN
    IF tb_enb_delay /= '1' THEN
    ELSIF rdEnb = '1' AND NOT ENDFILE(fp) THEN
      READLINE(fp, l);
      READ(l, read_data);
    END IF;
    rawData_ctrl_vStart <= read_data;
  END PROCESS ctrl_vStart_fileread;

  -- holdData reg for Frame_To_Pixels3_out2_2_bus
  stimuli_Frame_To_Pixels3_out2_2_bus_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      holdData_ctrl_vStart <= 'X';
    ELSIF clk'event AND clk = '1' THEN
      holdData_ctrl_vStart <= rawData_ctrl_vStart;
    END IF;
  END PROCESS stimuli_Frame_To_Pixels3_out2_2_bus_process;

  stimuli_Frame_To_Pixels3_out2_2_bus_1: PROCESS (rawData_ctrl_vStart, rdEnb)
  BEGIN
    IF rdEnb = '0' THEN
      ctrl_vStart_offset <= holdData_ctrl_vStart;
    ELSE
      ctrl_vStart_offset <= rawData_ctrl_vStart;
    END IF;
  END PROCESS stimuli_Frame_To_Pixels3_out2_2_bus_1;

  ctrl_vStart <= ctrl_vStart_offset AFTER 2 ns;

  Frame_To_Pixels3_out2_1_bus_addr_delay_1 <= Bit_Concat_out1_addr AFTER 1 ns;

  -- Data source for ctrl_hEnd
  ctrl_hEnd_fileread: PROCESS (Frame_To_Pixels3_out2_1_bus_addr_delay_1, tb_enb_delay, rdEnb)
    FILE fp: TEXT open READ_MODE is "ctrl_hEnd.dat";
    VARIABLE l: LINE;
    VARIABLE read_data: std_logic;

  BEGIN
    IF tb_enb_delay /= '1' THEN
    ELSIF rdEnb = '1' AND NOT ENDFILE(fp) THEN
      READLINE(fp, l);
      READ(l, read_data);
    END IF;
    rawData_ctrl_hEnd <= read_data;
  END PROCESS ctrl_hEnd_fileread;

  -- holdData reg for Frame_To_Pixels3_out2_1_bus
  stimuli_Frame_To_Pixels3_out2_1_bus_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      holdData_ctrl_hEnd <= 'X';
    ELSIF clk'event AND clk = '1' THEN
      holdData_ctrl_hEnd <= rawData_ctrl_hEnd;
    END IF;
  END PROCESS stimuli_Frame_To_Pixels3_out2_1_bus_process;

  stimuli_Frame_To_Pixels3_out2_1_bus_1: PROCESS (rawData_ctrl_hEnd, rdEnb)
  BEGIN
    IF rdEnb = '0' THEN
      ctrl_hEnd_offset <= holdData_ctrl_hEnd;
    ELSE
      ctrl_hEnd_offset <= rawData_ctrl_hEnd;
    END IF;
  END PROCESS stimuli_Frame_To_Pixels3_out2_1_bus_1;

  ctrl_hEnd <= ctrl_hEnd_offset AFTER 2 ns;

  Frame_To_Pixels3_out2_bus_addr_delay_1 <= Bit_Concat_out1_addr AFTER 1 ns;

  -- Data source for ctrl_hStart
  ctrl_hStart_fileread: PROCESS (Frame_To_Pixels3_out2_bus_addr_delay_1, tb_enb_delay, rdEnb)
    FILE fp: TEXT open READ_MODE is "ctrl_hStart.dat";
    VARIABLE l: LINE;
    VARIABLE read_data: std_logic;

  BEGIN
    IF tb_enb_delay /= '1' THEN
    ELSIF rdEnb = '1' AND NOT ENDFILE(fp) THEN
      READLINE(fp, l);
      READ(l, read_data);
    END IF;
    rawData_ctrl_hStart <= read_data;
  END PROCESS ctrl_hStart_fileread;

  -- holdData reg for Frame_To_Pixels3_out2_bus
  stimuli_Frame_To_Pixels3_out2_bus_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      holdData_ctrl_hStart <= 'X';
    ELSIF clk'event AND clk = '1' THEN
      holdData_ctrl_hStart <= rawData_ctrl_hStart;
    END IF;
  END PROCESS stimuli_Frame_To_Pixels3_out2_bus_process;

  stimuli_Frame_To_Pixels3_out2_bus_1: PROCESS (rawData_ctrl_hStart, rdEnb)
  BEGIN
    IF rdEnb = '0' THEN
      ctrl_hStart_offset <= holdData_ctrl_hStart;
    ELSE
      ctrl_hStart_offset <= rawData_ctrl_hStart;
    END IF;
  END PROCESS stimuli_Frame_To_Pixels3_out2_bus_1;

  ctrl_hStart <= ctrl_hStart_offset AFTER 2 ns;

  -- Data source for Video_in_2
  Video_in_2_fileread: PROCESS (Bit_Concat_out1_addr_delay, tb_enb_delay, rdEnb)
    FILE fp: TEXT open READ_MODE is "Video_in_2.dat";
    VARIABLE l: LINE;
    VARIABLE read_data: std_logic_vector(63 DOWNTO 0);

  BEGIN
    IF tb_enb_delay /= '1' THEN
    ELSIF rdEnb = '1' AND NOT ENDFILE(fp) THEN
      READLINE(fp, l);
      HREAD(l, read_data);
    END IF;
    rawData_Video_in_2 <= unsigned(read_data(63 DOWNTO 0));
  END PROCESS Video_in_2_fileread;

  -- holdData reg for Bit_Concat_out1
  stimuli_Bit_Concat_out1_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      holdData_Video_in_2 <= (OTHERS => 'X');
    ELSIF clk'event AND clk = '1' THEN
      holdData_Video_in_2 <= rawData_Video_in_2;
    END IF;
  END PROCESS stimuli_Bit_Concat_out1_process;

  stimuli_Bit_Concat_out1_1: PROCESS (rawData_Video_in_2, rdEnb)
  BEGIN
    IF rdEnb = '0' THEN
      Video_in_2_offset <= holdData_Video_in_2;
    ELSE
      Video_in_2_offset <= rawData_Video_in_2;
    END IF;
  END PROCESS stimuli_Bit_Concat_out1_1;

  Video_in_2 <= Video_in_2_offset AFTER 2 ns;

  Video_in_2_1 <= std_logic_vector(Video_in_2);

  -- Data source for Video_in_1
  Video_in_1_fileread: PROCESS (Bit_Concat_out1_addr_delay, tb_enb_delay, rdEnb)
    FILE fp: TEXT open READ_MODE is "Video_in_1.dat";
    VARIABLE l: LINE;
    VARIABLE read_data: std_logic_vector(63 DOWNTO 0);

  BEGIN
    IF tb_enb_delay /= '1' THEN
    ELSIF rdEnb = '1' AND NOT ENDFILE(fp) THEN
      READLINE(fp, l);
      HREAD(l, read_data);
    END IF;
    rawData_Video_in_1 <= unsigned(read_data(63 DOWNTO 0));
  END PROCESS Video_in_1_fileread;

  -- holdData reg for Bit_Concat_out1
  stimuli_Bit_Concat_out1_2_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      holdData_Video_in_1 <= (OTHERS => 'X');
    ELSIF clk'event AND clk = '1' THEN
      holdData_Video_in_1 <= rawData_Video_in_1;
    END IF;
  END PROCESS stimuli_Bit_Concat_out1_2_process;

  stimuli_Bit_Concat_out1_3: PROCESS (rawData_Video_in_1, rdEnb)
  BEGIN
    IF rdEnb = '0' THEN
      Video_in_1_offset <= holdData_Video_in_1;
    ELSE
      Video_in_1_offset <= rawData_Video_in_1;
    END IF;
  END PROCESS stimuli_Bit_Concat_out1_3;

  Video_in_1 <= Video_in_1_offset AFTER 2 ns;

  Video_in_1_1 <= std_logic_vector(Video_in_1);

  
  Bit_Concat_out1_active <= '1' WHEN Bit_Concat_out1_addr /= to_unsigned(16#B0400#, 20) ELSE
      '0';

  Bit_Concat_out1_enb <= Bit_Concat_out1_active AND (rdEnb AND tb_enb_delay);

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 721920
  BitConcat_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Bit_Concat_out1_addr <= to_unsigned(16#00000#, 20);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF Bit_Concat_out1_enb = '1' THEN
        IF Bit_Concat_out1_addr >= to_unsigned(16#B0400#, 20) THEN 
          Bit_Concat_out1_addr <= to_unsigned(16#00000#, 20);
        ELSE 
          Bit_Concat_out1_addr <= Bit_Concat_out1_addr + to_unsigned(16#00001#, 20);
        END IF;
      END IF;
    END IF;
  END PROCESS BitConcat_process;


  Bit_Concat_out1_addr_delay <= Bit_Concat_out1_addr AFTER 1 ns;

  -- Data source for Video_in_0
  Video_in_0_fileread: PROCESS (Bit_Concat_out1_addr_delay, tb_enb_delay, rdEnb)
    FILE fp: TEXT open READ_MODE is "Video_in_0.dat";
    VARIABLE l: LINE;
    VARIABLE read_data: std_logic_vector(63 DOWNTO 0);

  BEGIN
    IF tb_enb_delay /= '1' THEN
    ELSIF rdEnb = '1' AND NOT ENDFILE(fp) THEN
      READLINE(fp, l);
      HREAD(l, read_data);
    END IF;
    rawData_Video_in_0 <= unsigned(read_data(63 DOWNTO 0));
  END PROCESS Video_in_0_fileread;

  -- holdData reg for Bit_Concat_out1
  stimuli_Bit_Concat_out1_4_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      holdData_Video_in_0 <= (OTHERS => 'X');
    ELSIF clk'event AND clk = '1' THEN
      holdData_Video_in_0 <= rawData_Video_in_0;
    END IF;
  END PROCESS stimuli_Bit_Concat_out1_4_process;

  stimuli_Bit_Concat_out1_5: PROCESS (rawData_Video_in_0, rdEnb)
  BEGIN
    IF rdEnb = '0' THEN
      Video_in_0_offset <= holdData_Video_in_0;
    ELSE
      Video_in_0_offset <= rawData_Video_in_0;
    END IF;
  END PROCESS stimuli_Bit_Concat_out1_5;

  Video_in_0 <= Video_in_0_offset AFTER 2 ns;

  Video_in_0_1 <= std_logic_vector(Video_in_0);

  snkDonen <=  NOT snkDone;

  resetn <=  NOT reset;

  tb_enb <= resetn AND snkDonen;

  -- Delay inside enable generation: register depth 1
  u_enable_delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tb_enb_delay <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      tb_enb_delay <= tb_enb;
    END IF;
  END PROCESS u_enable_delay_process;


  
  rdEnb <= tb_enb_delay WHEN snkDone = '0' ELSE
      '0';

  clk_enable <= rdEnb AFTER 2 ns;

  reset_gen: PROCESS 
  BEGIN
    reset <= '1';
    WAIT FOR 20 ns;
    WAIT UNTIL clk'event AND clk = '1';
    WAIT FOR 2 ns;
    reset <= '0';
    WAIT;
  END PROCESS reset_gen;

  clk_gen: PROCESS 
  BEGIN
    clk <= '1';
    WAIT FOR 5 ns;
    clk <= '0';
    WAIT FOR 5 ns;
    IF snkDone = '1' THEN
      clk <= '1';
      WAIT FOR 5 ns;
      clk <= '0';
      WAIT FOR 5 ns;
      WAIT;
    END IF;
  END PROCESS clk_gen;

  Video_out_enb <= ce_out AND Video_out_active;

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 721920
  c_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Video_out_addr <= to_unsigned(16#00000#, 20);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF Video_out_enb = '1' THEN
        IF Video_out_addr >= to_unsigned(16#B0400#, 20) THEN 
          Video_out_addr <= to_unsigned(16#00000#, 20);
        ELSE 
          Video_out_addr <= Video_out_addr + to_unsigned(16#00001#, 20);
        END IF;
      END IF;
    END IF;
  END PROCESS c_3_process;


  
  Video_out_lastAddr <= '1' WHEN Video_out_addr >= to_unsigned(16#B0400#, 20) ELSE
      '0';

  Video_out_done <= Video_out_lastAddr AND resetn;

  -- Delay to allow last sim cycle to complete
  checkDone_1_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      check1_done <= '0';
    ELSIF clk'event AND clk = '1' THEN
      IF Video_out_done_enb = '1' THEN
        check1_done <= Video_out_done;
      END IF;
    END IF;
  END PROCESS checkDone_1_process;

  snkDone <= check6_done AND (check5_done AND (check4_done AND (check3_done AND (check1_done AND check2_done))));

  Video_out_unsigned <= unsigned(Video_out);

  Video_out_addr_delay_1 <= Video_out_addr AFTER 1 ns;

  -- Data source for Video_out_expected
  Video_out_expected_fileread: PROCESS (Video_out_addr_delay_1, tb_enb_delay, ce_out)
    FILE fp: TEXT open READ_MODE is "Video_out_expected.dat";
    VARIABLE l: LINE;
    VARIABLE read_data: std_logic_vector(63 DOWNTO 0);

  BEGIN
    IF tb_enb_delay /= '1' THEN
    ELSIF ce_out = '1' AND NOT ENDFILE(fp) THEN
      READLINE(fp, l);
      HREAD(l, read_data);
    END IF;
    Video_out_expected <= unsigned(read_data(63 DOWNTO 0));
  END PROCESS Video_out_expected_fileread;

  Video_out_ref <= Video_out_expected;

  Video_out_unsigned_checker: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Video_out_testFailure <= '0';
    ELSIF clk'event AND clk = '1' THEN
      IF ce_out = '1' AND Video_out_unsigned /= Video_out_ref THEN
        Video_out_testFailure <= '1';
        ASSERT FALSE
          REPORT "Error in Video_out_unsigned: Expected " & to_hex(Video_out_ref) & (" Actual " & to_hex(Video_out_unsigned))
          SEVERITY ERROR;
      END IF;
    END IF;
  END PROCESS Video_out_unsigned_checker;

  valid_out_hStart_addr_delay_1 <= Video_out_addr AFTER 1 ns;

  -- Data source for valid_out_hStart_expected
  valid_out_hStart_expected_fileread: PROCESS (valid_out_hStart_addr_delay_1, tb_enb_delay, ce_out)
    FILE fp: TEXT open READ_MODE is "valid_out_hStart_expected.dat";
    VARIABLE l: LINE;
    VARIABLE read_data: std_logic;

  BEGIN
    IF tb_enb_delay /= '1' THEN
    ELSIF ce_out = '1' AND NOT ENDFILE(fp) THEN
      READLINE(fp, l);
      READ(l, read_data);
    END IF;
    valid_out_hStart_expected <= read_data;
  END PROCESS valid_out_hStart_expected_fileread;

  valid_out_hStart_ref <= valid_out_hStart_expected;

  valid_out_hStart_checker: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      valid_out_hStart_testFailure <= '0';
    ELSIF clk'event AND clk = '1' THEN
      IF ce_out = '1' AND valid_out_hStart /= valid_out_hStart_ref THEN
        valid_out_hStart_testFailure <= '1';
        ASSERT FALSE
          REPORT "Error in valid_out_hStart: Expected " & to_hex(valid_out_hStart_ref) & (" Actual " & to_hex(valid_out_hStart))
          SEVERITY ERROR;
      END IF;
    END IF;
  END PROCESS valid_out_hStart_checker;

  valid_out_hEnd_addr_delay_1 <= Video_out_addr AFTER 1 ns;

  -- Data source for valid_out_hEnd_expected
  valid_out_hEnd_expected_fileread: PROCESS (valid_out_hEnd_addr_delay_1, tb_enb_delay, ce_out)
    FILE fp: TEXT open READ_MODE is "valid_out_hEnd_expected.dat";
    VARIABLE l: LINE;
    VARIABLE read_data: std_logic;

  BEGIN
    IF tb_enb_delay /= '1' THEN
    ELSIF ce_out = '1' AND NOT ENDFILE(fp) THEN
      READLINE(fp, l);
      READ(l, read_data);
    END IF;
    valid_out_hEnd_expected <= read_data;
  END PROCESS valid_out_hEnd_expected_fileread;

  valid_out_hEnd_ref <= valid_out_hEnd_expected;

  valid_out_hEnd_checker: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      valid_out_hEnd_testFailure <= '0';
    ELSIF clk'event AND clk = '1' THEN
      IF ce_out = '1' AND valid_out_hEnd /= valid_out_hEnd_ref THEN
        valid_out_hEnd_testFailure <= '1';
        ASSERT FALSE
          REPORT "Error in valid_out_hEnd: Expected " & to_hex(valid_out_hEnd_ref) & (" Actual " & to_hex(valid_out_hEnd))
          SEVERITY ERROR;
      END IF;
    END IF;
  END PROCESS valid_out_hEnd_checker;

  valid_out_vStart_addr_delay_1 <= Video_out_addr AFTER 1 ns;

  -- Data source for valid_out_vStart_expected
  valid_out_vStart_expected_fileread: PROCESS (valid_out_vStart_addr_delay_1, tb_enb_delay, ce_out)
    FILE fp: TEXT open READ_MODE is "valid_out_vStart_expected.dat";
    VARIABLE l: LINE;
    VARIABLE read_data: std_logic;

  BEGIN
    IF tb_enb_delay /= '1' THEN
    ELSIF ce_out = '1' AND NOT ENDFILE(fp) THEN
      READLINE(fp, l);
      READ(l, read_data);
    END IF;
    valid_out_vStart_expected <= read_data;
  END PROCESS valid_out_vStart_expected_fileread;

  valid_out_vStart_ref <= valid_out_vStart_expected;

  valid_out_vStart_checker: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      valid_out_vStart_testFailure <= '0';
    ELSIF clk'event AND clk = '1' THEN
      IF ce_out = '1' AND valid_out_vStart /= valid_out_vStart_ref THEN
        valid_out_vStart_testFailure <= '1';
        ASSERT FALSE
          REPORT "Error in valid_out_vStart: Expected " & to_hex(valid_out_vStart_ref) & (" Actual " & to_hex(valid_out_vStart))
          SEVERITY ERROR;
      END IF;
    END IF;
  END PROCESS valid_out_vStart_checker;

  valid_out_vEnd_addr_delay_1 <= Video_out_addr AFTER 1 ns;

  -- Data source for valid_out_vEnd_expected
  valid_out_vEnd_expected_fileread: PROCESS (valid_out_vEnd_addr_delay_1, tb_enb_delay, ce_out)
    FILE fp: TEXT open READ_MODE is "valid_out_vEnd_expected.dat";
    VARIABLE l: LINE;
    VARIABLE read_data: std_logic;

  BEGIN
    IF tb_enb_delay /= '1' THEN
    ELSIF ce_out = '1' AND NOT ENDFILE(fp) THEN
      READLINE(fp, l);
      READ(l, read_data);
    END IF;
    valid_out_vEnd_expected <= read_data;
  END PROCESS valid_out_vEnd_expected_fileread;

  valid_out_vEnd_ref <= valid_out_vEnd_expected;

  valid_out_vEnd_checker: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      valid_out_vEnd_testFailure <= '0';
    ELSIF clk'event AND clk = '1' THEN
      IF ce_out = '1' AND valid_out_vEnd /= valid_out_vEnd_ref THEN
        valid_out_vEnd_testFailure <= '1';
        ASSERT FALSE
          REPORT "Error in valid_out_vEnd: Expected " & to_hex(valid_out_vEnd_ref) & (" Actual " & to_hex(valid_out_vEnd))
          SEVERITY ERROR;
      END IF;
    END IF;
  END PROCESS valid_out_vEnd_checker;

  valid_out_valid_addr_delay_1 <= Video_out_addr AFTER 1 ns;

  -- Data source for valid_out_valid_expected
  valid_out_valid_expected_fileread: PROCESS (valid_out_valid_addr_delay_1, tb_enb_delay, ce_out)
    FILE fp: TEXT open READ_MODE is "valid_out_valid_expected.dat";
    VARIABLE l: LINE;
    VARIABLE read_data: std_logic;

  BEGIN
    IF tb_enb_delay /= '1' THEN
    ELSIF ce_out = '1' AND NOT ENDFILE(fp) THEN
      READLINE(fp, l);
      READ(l, read_data);
    END IF;
    valid_out_valid_expected <= read_data;
  END PROCESS valid_out_valid_expected_fileread;

  valid_out_valid_ref <= valid_out_valid_expected;

  valid_out_valid_checker: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      valid_out_valid_testFailure <= '0';
    ELSIF clk'event AND clk = '1' THEN
      IF ce_out = '1' AND valid_out_valid /= valid_out_valid_ref THEN
        valid_out_valid_testFailure <= '1';
        ASSERT FALSE
          REPORT "Error in valid_out_valid: Expected " & to_hex(valid_out_valid_ref) & (" Actual " & to_hex(valid_out_valid))
          SEVERITY ERROR;
      END IF;
    END IF;
  END PROCESS valid_out_valid_checker;

  testFailure <= valid_out_valid_testFailure OR (valid_out_vEnd_testFailure OR (valid_out_vStart_testFailure OR (valid_out_hEnd_testFailure OR (Video_out_testFailure OR valid_out_hStart_testFailure))));

  completed_msg: PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF snkDone = '1' THEN
        IF testFailure = '0' THEN
          ASSERT FALSE
            REPORT "**************TEST COMPLETED (PASSED)**************"
            SEVERITY NOTE;
        ELSE
          ASSERT FALSE
            REPORT "**************TEST COMPLETED (FAILED)**************"
            SEVERITY NOTE;
        END IF;
      END IF;
    END IF;
  END PROCESS completed_msg;

END rtl;

