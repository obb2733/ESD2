-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\sobelFilter2024a\Subsystem1_block6.vhd
-- Created: 2025-04-15 15:58:44
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Subsystem1_block6
-- Source Path: sobelFilter2024a/conv_core/sobel_vert_conv_core_alt/Subsystem1
-- Hierarchy Level: 2
-- Model version: 8.65
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.conv_core_pkg.ALL;

ENTITY Subsystem1_block6 IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        channel_in                        :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        coeffs_0                          :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
        coeffs_1                          :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
        coeffs_2                          :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
        coeffs_3                          :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
        coeffs_4                          :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
        coeffs_5                          :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
        coeffs_6                          :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
        coeffs_7                          :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
        coeffs_8                          :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
        Enable                            :   IN    std_logic;
        Video_out                         :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
        );
END Subsystem1_block6;


ARCHITECTURE rtl OF Subsystem1_block6 IS

  -- Component Declarations
  COMPONENT slicer_block3
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          channel_in                      :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          out_1                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          out_2                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          out_3                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          out_4                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          out_5                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          out_6                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          out_7                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          out_8                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          out_9                           :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : slicer_block3
    USE ENTITY work.slicer_block3(rtl);

  -- Signals
  SIGNAL enb_gated                        : std_logic;
  SIGNAL alphavalid                       : std_logic;
  SIGNAL slicer_out1                      : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL slicer_out2                      : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL slicer_out3                      : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL slicer_out4                      : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL slicer_out5                      : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL slicer_out6                      : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL slicer_out7                      : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL slicer_out8                      : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL slicer_out9                      : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL coeffs                           : vector_of_signed16(0 TO 8);  -- sfix16_En12 [9]
  SIGNAL Mux_out1                         : vector_of_unsigned8(0 TO 8);  -- uint8 [9]
  SIGNAL Product_cast                     : vector_of_signed9(0 TO 8);  -- sfix9 [9]
  SIGNAL Product_mul_temp                 : vector_of_signed25(0 TO 8);  -- sfix25_En12 [9]
  SIGNAL Product_out1                     : vector_of_signed24(0 TO 8);  -- sfix24_En12 [9]
  SIGNAL Delay1_out1                      : vector_of_signed24(0 TO 8);  -- sfix24_En12 [9]
  SIGNAL in0_0                            : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL in0_1                            : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL Sum_of_Elements_stage2_add_cast  : signed(27 DOWNTO 0);  -- sfix28_En12
  SIGNAL Sum_of_Elements_stage2_add_cast_1 : signed(27 DOWNTO 0);  -- sfix28_En12
  SIGNAL Sum_of_Elements_stage2_add_temp  : signed(27 DOWNTO 0);  -- sfix28_En12
  SIGNAL Sum_of_Elements_op_stage1        : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL in0_2                            : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL Sum_of_Elements_stage3_add_cast  : signed(27 DOWNTO 0);  -- sfix28_En12
  SIGNAL Sum_of_Elements_stage3_add_cast_1 : signed(27 DOWNTO 0);  -- sfix28_En12
  SIGNAL Sum_of_Elements_stage3_add_temp  : signed(27 DOWNTO 0);  -- sfix28_En12
  SIGNAL Sum_of_Elements_op_stage2        : signed(25 DOWNTO 0);  -- sfix26_En12
  SIGNAL in0_3                            : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL Sum_of_Elements_stage4_add_cast  : signed(27 DOWNTO 0);  -- sfix28_En12
  SIGNAL Sum_of_Elements_stage4_add_cast_1 : signed(27 DOWNTO 0);  -- sfix28_En12
  SIGNAL Sum_of_Elements_stage4_add_temp  : signed(27 DOWNTO 0);  -- sfix28_En12
  SIGNAL Sum_of_Elements_op_stage3        : signed(26 DOWNTO 0);  -- sfix27_En12
  SIGNAL in0_4                            : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL Sum_of_Elements_stage5_add_cast  : signed(27 DOWNTO 0);  -- sfix28_En12
  SIGNAL Sum_of_Elements_stage5_add_cast_1 : signed(27 DOWNTO 0);  -- sfix28_En12
  SIGNAL Sum_of_Elements_op_stage4        : signed(27 DOWNTO 0);  -- sfix28_En12
  SIGNAL in0_5                            : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL Sum_of_Elements_stage6_add_cast  : signed(28 DOWNTO 0);  -- sfix29_En12
  SIGNAL Sum_of_Elements_stage6_add_cast_1 : signed(27 DOWNTO 0);  -- sfix28_En12
  SIGNAL Sum_of_Elements_stage6_add_cast_2 : signed(28 DOWNTO 0);  -- sfix29_En12
  SIGNAL Sum_of_Elements_stage6_add_temp  : signed(28 DOWNTO 0);  -- sfix29_En12
  SIGNAL Sum_of_Elements_stage6_cast      : signed(27 DOWNTO 0);  -- sfix28_En12
  SIGNAL Sum_of_Elements_op_stage5        : signed(28 DOWNTO 0);  -- sfix29_En12
  SIGNAL in0_6                            : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL Sum_of_Elements_stage7_add_cast  : signed(27 DOWNTO 0);  -- sfix28_En12
  SIGNAL Sum_of_Elements_stage7_add_cast_1 : signed(28 DOWNTO 0);  -- sfix29_En12
  SIGNAL Sum_of_Elements_stage7_add_cast_2 : signed(27 DOWNTO 0);  -- sfix28_En12
  SIGNAL Sum_of_Elements_stage7_add_cast_3 : signed(28 DOWNTO 0);  -- sfix29_En12
  SIGNAL Sum_of_Elements_stage7_add_temp  : signed(28 DOWNTO 0);  -- sfix29_En12
  SIGNAL Sum_of_Elements_stage7_cast      : signed(27 DOWNTO 0);  -- sfix28_En12
  SIGNAL Sum_of_Elements_op_stage6        : signed(29 DOWNTO 0);  -- sfix30_En12
  SIGNAL in0_7                            : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL Sum_of_Elements_stage8_add_cast  : signed(27 DOWNTO 0);  -- sfix28_En12
  SIGNAL Sum_of_Elements_stage8_add_cast_1 : signed(28 DOWNTO 0);  -- sfix29_En12
  SIGNAL Sum_of_Elements_stage8_add_cast_2 : signed(27 DOWNTO 0);  -- sfix28_En12
  SIGNAL Sum_of_Elements_stage8_add_cast_3 : signed(28 DOWNTO 0);  -- sfix29_En12
  SIGNAL Sum_of_Elements_stage8_add_temp  : signed(28 DOWNTO 0);  -- sfix29_En12
  SIGNAL Sum_of_Elements_stage8_cast      : signed(27 DOWNTO 0);  -- sfix28_En12
  SIGNAL Sum_of_Elements_op_stage7        : signed(30 DOWNTO 0);  -- sfix31_En12
  SIGNAL in0_8                            : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL Sum_of_Elements_stage9_add_cast  : signed(27 DOWNTO 0);  -- sfix28_En12
  SIGNAL Sum_of_Elements_stage9_add_cast_1 : signed(28 DOWNTO 0);  -- sfix29_En12
  SIGNAL Sum_of_Elements_stage9_add_cast_2 : signed(27 DOWNTO 0);  -- sfix28_En12
  SIGNAL Sum_of_Elements_stage9_add_cast_3 : signed(28 DOWNTO 0);  -- sfix29_En12
  SIGNAL Sum_of_Elements_stage9_add_temp  : signed(28 DOWNTO 0);  -- sfix29_En12
  SIGNAL Sum_of_Elements_stage9_cast      : signed(27 DOWNTO 0);  -- sfix28_En12
  SIGNAL Sum_of_Elements_out1             : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay2_out1                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay2_out1_bypass               : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay2_out1_last_value           : unsigned(7 DOWNTO 0);  -- uint8

BEGIN
  -- slice out gray

  u_slicer : slicer_block3
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb_gated,
              channel_in => channel_in,  -- uint8
              out_1 => slicer_out1,  -- uint8
              out_2 => slicer_out2,  -- uint8
              out_3 => slicer_out3,  -- uint8
              out_4 => slicer_out4,  -- uint8
              out_5 => slicer_out5,  -- uint8
              out_6 => slicer_out6,  -- uint8
              out_7 => slicer_out7,  -- uint8
              out_8 => slicer_out8,  -- uint8
              out_9 => slicer_out9  -- uint8
              );

  alphavalid <= Enable;

  enb_gated <= alphavalid AND enb;

  coeffs(0) <= signed(coeffs_0);
  coeffs(1) <= signed(coeffs_1);
  coeffs(2) <= signed(coeffs_2);
  coeffs(3) <= signed(coeffs_3);
  coeffs(4) <= signed(coeffs_4);
  coeffs(5) <= signed(coeffs_5);
  coeffs(6) <= signed(coeffs_6);
  coeffs(7) <= signed(coeffs_7);
  coeffs(8) <= signed(coeffs_8);

  Mux_out1(0) <= unsigned(slicer_out1);
  Mux_out1(1) <= unsigned(slicer_out2);
  Mux_out1(2) <= unsigned(slicer_out3);
  Mux_out1(3) <= unsigned(slicer_out4);
  Mux_out1(4) <= unsigned(slicer_out5);
  Mux_out1(5) <= unsigned(slicer_out6);
  Mux_out1(6) <= unsigned(slicer_out7);
  Mux_out1(7) <= unsigned(slicer_out8);
  Mux_out1(8) <= unsigned(slicer_out9);


  Product_out1_gen: FOR t_0 IN 0 TO 8 GENERATE
    Product_cast(t_0) <= signed(resize(Mux_out1(t_0), 9));
    Product_mul_temp(t_0) <= coeffs(t_0) * Product_cast(t_0);
    Product_out1(t_0) <= Product_mul_temp(t_0)(23 DOWNTO 0);
  END GENERATE Product_out1_gen;


  Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_out1 <= (OTHERS => to_signed(16#000000#, 24));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay1_out1 <= Product_out1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  in0_0 <= Delay1_out1(0);

  in0_1 <= Delay1_out1(1);

  Sum_of_Elements_stage2_add_cast <= resize(in0_0, 28);
  Sum_of_Elements_stage2_add_cast_1 <= resize(in0_1, 28);
  Sum_of_Elements_stage2_add_temp <= Sum_of_Elements_stage2_add_cast + Sum_of_Elements_stage2_add_cast_1;
  
  Sum_of_Elements_op_stage1 <= "0111111111111111111111111" WHEN (Sum_of_Elements_stage2_add_temp(27) = '0') AND (Sum_of_Elements_stage2_add_temp(26 DOWNTO 24) /= "000") ELSE
      "1000000000000000000000000" WHEN (Sum_of_Elements_stage2_add_temp(27) = '1') AND (Sum_of_Elements_stage2_add_temp(26 DOWNTO 24) /= "111") ELSE
      Sum_of_Elements_stage2_add_temp(24 DOWNTO 0);

  in0_2 <= Delay1_out1(2);

  Sum_of_Elements_stage3_add_cast <= resize(Sum_of_Elements_op_stage1, 28);
  Sum_of_Elements_stage3_add_cast_1 <= resize(in0_2, 28);
  Sum_of_Elements_stage3_add_temp <= Sum_of_Elements_stage3_add_cast + Sum_of_Elements_stage3_add_cast_1;
  
  Sum_of_Elements_op_stage2 <= "01111111111111111111111111" WHEN (Sum_of_Elements_stage3_add_temp(27) = '0') AND (Sum_of_Elements_stage3_add_temp(26 DOWNTO 25) /= "00") ELSE
      "10000000000000000000000000" WHEN (Sum_of_Elements_stage3_add_temp(27) = '1') AND (Sum_of_Elements_stage3_add_temp(26 DOWNTO 25) /= "11") ELSE
      Sum_of_Elements_stage3_add_temp(25 DOWNTO 0);

  in0_3 <= Delay1_out1(3);

  Sum_of_Elements_stage4_add_cast <= resize(Sum_of_Elements_op_stage2, 28);
  Sum_of_Elements_stage4_add_cast_1 <= resize(in0_3, 28);
  Sum_of_Elements_stage4_add_temp <= Sum_of_Elements_stage4_add_cast + Sum_of_Elements_stage4_add_cast_1;
  
  Sum_of_Elements_op_stage3 <= "011111111111111111111111111" WHEN (Sum_of_Elements_stage4_add_temp(27) = '0') AND (Sum_of_Elements_stage4_add_temp(26) /= '0') ELSE
      "100000000000000000000000000" WHEN (Sum_of_Elements_stage4_add_temp(27) = '1') AND (Sum_of_Elements_stage4_add_temp(26) /= '1') ELSE
      Sum_of_Elements_stage4_add_temp(26 DOWNTO 0);

  in0_4 <= Delay1_out1(4);

  Sum_of_Elements_stage5_add_cast <= resize(Sum_of_Elements_op_stage3, 28);
  Sum_of_Elements_stage5_add_cast_1 <= resize(in0_4, 28);
  Sum_of_Elements_op_stage4 <= Sum_of_Elements_stage5_add_cast + Sum_of_Elements_stage5_add_cast_1;

  in0_5 <= Delay1_out1(5);

  Sum_of_Elements_stage6_add_cast <= resize(Sum_of_Elements_op_stage4, 29);
  Sum_of_Elements_stage6_add_cast_1 <= resize(in0_5, 28);
  Sum_of_Elements_stage6_add_cast_2 <= resize(Sum_of_Elements_stage6_add_cast_1, 29);
  Sum_of_Elements_stage6_add_temp <= Sum_of_Elements_stage6_add_cast + Sum_of_Elements_stage6_add_cast_2;
  
  Sum_of_Elements_stage6_cast <= X"7FFFFFF" WHEN (Sum_of_Elements_stage6_add_temp(28) = '0') AND (Sum_of_Elements_stage6_add_temp(27) /= '0') ELSE
      X"8000000" WHEN (Sum_of_Elements_stage6_add_temp(28) = '1') AND (Sum_of_Elements_stage6_add_temp(27) /= '1') ELSE
      Sum_of_Elements_stage6_add_temp(27 DOWNTO 0);
  Sum_of_Elements_op_stage5 <= resize(Sum_of_Elements_stage6_cast, 29);

  in0_6 <= Delay1_out1(6);

  
  Sum_of_Elements_stage7_add_cast <= X"7FFFFFF" WHEN (Sum_of_Elements_op_stage5(28) = '0') AND (Sum_of_Elements_op_stage5(27) /= '0') ELSE
      X"8000000" WHEN (Sum_of_Elements_op_stage5(28) = '1') AND (Sum_of_Elements_op_stage5(27) /= '1') ELSE
      Sum_of_Elements_op_stage5(27 DOWNTO 0);
  Sum_of_Elements_stage7_add_cast_1 <= resize(Sum_of_Elements_stage7_add_cast, 29);
  Sum_of_Elements_stage7_add_cast_2 <= resize(in0_6, 28);
  Sum_of_Elements_stage7_add_cast_3 <= resize(Sum_of_Elements_stage7_add_cast_2, 29);
  Sum_of_Elements_stage7_add_temp <= Sum_of_Elements_stage7_add_cast_1 + Sum_of_Elements_stage7_add_cast_3;
  
  Sum_of_Elements_stage7_cast <= X"7FFFFFF" WHEN (Sum_of_Elements_stage7_add_temp(28) = '0') AND (Sum_of_Elements_stage7_add_temp(27) /= '0') ELSE
      X"8000000" WHEN (Sum_of_Elements_stage7_add_temp(28) = '1') AND (Sum_of_Elements_stage7_add_temp(27) /= '1') ELSE
      Sum_of_Elements_stage7_add_temp(27 DOWNTO 0);
  Sum_of_Elements_op_stage6 <= resize(Sum_of_Elements_stage7_cast, 30);

  in0_7 <= Delay1_out1(7);

  
  Sum_of_Elements_stage8_add_cast <= X"7FFFFFF" WHEN (Sum_of_Elements_op_stage6(29) = '0') AND (Sum_of_Elements_op_stage6(28 DOWNTO 27) /= "00") ELSE
      X"8000000" WHEN (Sum_of_Elements_op_stage6(29) = '1') AND (Sum_of_Elements_op_stage6(28 DOWNTO 27) /= "11") ELSE
      Sum_of_Elements_op_stage6(27 DOWNTO 0);
  Sum_of_Elements_stage8_add_cast_1 <= resize(Sum_of_Elements_stage8_add_cast, 29);
  Sum_of_Elements_stage8_add_cast_2 <= resize(in0_7, 28);
  Sum_of_Elements_stage8_add_cast_3 <= resize(Sum_of_Elements_stage8_add_cast_2, 29);
  Sum_of_Elements_stage8_add_temp <= Sum_of_Elements_stage8_add_cast_1 + Sum_of_Elements_stage8_add_cast_3;
  
  Sum_of_Elements_stage8_cast <= X"7FFFFFF" WHEN (Sum_of_Elements_stage8_add_temp(28) = '0') AND (Sum_of_Elements_stage8_add_temp(27) /= '0') ELSE
      X"8000000" WHEN (Sum_of_Elements_stage8_add_temp(28) = '1') AND (Sum_of_Elements_stage8_add_temp(27) /= '1') ELSE
      Sum_of_Elements_stage8_add_temp(27 DOWNTO 0);
  Sum_of_Elements_op_stage7 <= resize(Sum_of_Elements_stage8_cast, 31);

  in0_8 <= Delay1_out1(8);

  
  Sum_of_Elements_stage9_add_cast <= X"7FFFFFF" WHEN (Sum_of_Elements_op_stage7(30) = '0') AND (Sum_of_Elements_op_stage7(29 DOWNTO 27) /= "000") ELSE
      X"8000000" WHEN (Sum_of_Elements_op_stage7(30) = '1') AND (Sum_of_Elements_op_stage7(29 DOWNTO 27) /= "111") ELSE
      Sum_of_Elements_op_stage7(27 DOWNTO 0);
  Sum_of_Elements_stage9_add_cast_1 <= resize(Sum_of_Elements_stage9_add_cast, 29);
  Sum_of_Elements_stage9_add_cast_2 <= resize(in0_8, 28);
  Sum_of_Elements_stage9_add_cast_3 <= resize(Sum_of_Elements_stage9_add_cast_2, 29);
  Sum_of_Elements_stage9_add_temp <= Sum_of_Elements_stage9_add_cast_1 + Sum_of_Elements_stage9_add_cast_3;
  
  Sum_of_Elements_stage9_cast <= X"7FFFFFF" WHEN (Sum_of_Elements_stage9_add_temp(28) = '0') AND (Sum_of_Elements_stage9_add_temp(27) /= '0') ELSE
      X"8000000" WHEN (Sum_of_Elements_stage9_add_temp(28) = '1') AND (Sum_of_Elements_stage9_add_temp(27) /= '1') ELSE
      Sum_of_Elements_stage9_add_temp(27 DOWNTO 0);
  
  Sum_of_Elements_out1 <= "11111111" WHEN (Sum_of_Elements_stage9_cast(27) = '0') AND (Sum_of_Elements_stage9_cast(26 DOWNTO 20) /= "0000000") ELSE
      "00000000" WHEN Sum_of_Elements_stage9_cast(27) = '1' ELSE
      unsigned(Sum_of_Elements_stage9_cast(19 DOWNTO 12));

  Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_out1 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay2_out1 <= Sum_of_Elements_out1;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  Video_out_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_out1_last_value <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay2_out1_last_value <= Delay2_out1_bypass;
      END IF;
    END IF;
  END PROCESS Video_out_bypass_process;


  
  Delay2_out1_bypass <= Delay2_out1_last_value WHEN alphavalid = '0' ELSE
      Delay2_out1;

  Video_out <= std_logic_vector(Delay2_out1_bypass);

END rtl;

