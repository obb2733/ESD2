-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\sobelFilter2024a\conv_core.vhd
-- Created: 2025-04-15 15:58:44
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 2.77039e-06
-- Target subsystem base rate: 2.77039e-06
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        2.77039e-06
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- Video_out                     ce_out        2.77039e-06
-- valid_out_hStart              ce_out        2.77039e-06
-- valid_out_hEnd                ce_out        2.77039e-06
-- valid_out_vStart              ce_out        2.77039e-06
-- valid_out_vEnd                ce_out        2.77039e-06
-- valid_out_valid               ce_out        2.77039e-06
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: conv_core
-- Source Path: sobelFilter2024a/conv_core
-- Hierarchy Level: 0
-- Model version: 8.65
-- 
-- Simulink model description for sobelFilter2024a:
-- 
-- Sobel Edge Detection Using the MATLAB(R) Function Block
-- This example shows how to use HDL Coder(TM) to check, 
-- generate, and verify HDL code for a Sobel Edge Detection 
-- block built using the MATLAB Function block.
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.conv_core_pkg.ALL;

ENTITY conv_core IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        Video_in_0                        :   IN    std_logic_vector(63 DOWNTO 0);  -- ufix64
        Video_in_1                        :   IN    std_logic_vector(63 DOWNTO 0);  -- ufix64
        Video_in_2                        :   IN    std_logic_vector(63 DOWNTO 0);  -- ufix64
        ctrl_hStart                       :   IN    std_logic;
        ctrl_hEnd                         :   IN    std_logic;
        ctrl_vStart                       :   IN    std_logic;
        ctrl_vEnd                         :   IN    std_logic;
        ctrl_valid                        :   IN    std_logic;
        ce_out                            :   OUT   std_logic;
        Video_out                         :   OUT   std_logic_vector(63 DOWNTO 0);  -- ufix64
        valid_out_hStart                  :   OUT   std_logic;
        valid_out_hEnd                    :   OUT   std_logic;
        valid_out_vStart                  :   OUT   std_logic;
        valid_out_vEnd                    :   OUT   std_logic;
        valid_out_valid                   :   OUT   std_logic
        );
END conv_core;


ARCHITECTURE rtl OF conv_core IS

  -- Component Declarations
  COMPONENT color_correct_core
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Video_in_0                      :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          Video_in_1                      :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          Video_in_2                      :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          ctrl_hStart                     :   IN    std_logic;
          ctrl_hEnd                       :   IN    std_logic;
          ctrl_vStart                     :   IN    std_logic;
          ctrl_vEnd                       :   IN    std_logic;
          ctrl_valid                      :   IN    std_logic;
          Video_out_0                     :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          Video_out_1                     :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          Video_out_2                     :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          valid_out_hStart                :   OUT   std_logic;
          valid_out_hEnd                  :   OUT   std_logic;
          valid_out_vStart                :   OUT   std_logic;
          valid_out_vEnd                  :   OUT   std_logic;
          valid_out_valid                 :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT just_gray_core
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Video_in_0                      :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          Video_in_1                      :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          Video_in_2                      :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          ctrl_hStart                     :   IN    std_logic;
          ctrl_hEnd                       :   IN    std_logic;
          ctrl_vStart                     :   IN    std_logic;
          ctrl_vEnd                       :   IN    std_logic;
          ctrl_valid                      :   IN    std_logic;
          Video_out                       :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          valid_out_hStart                :   OUT   std_logic;
          valid_out_hEnd                  :   OUT   std_logic;
          valid_out_vStart                :   OUT   std_logic;
          valid_out_vEnd                  :   OUT   std_logic;
          valid_out_valid                 :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT normalize_image
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Video_in                        :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          ctrl_hStart                     :   IN    std_logic;
          ctrl_hEnd                       :   IN    std_logic;
          ctrl_vStart                     :   IN    std_logic;
          ctrl_vEnd                       :   IN    std_logic;
          ctrl_valid                      :   IN    std_logic;
          Video_out                       :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          valid_out_hStart                :   OUT   std_logic;
          valid_out_hEnd                  :   OUT   std_logic;
          valid_out_vStart                :   OUT   std_logic;
          valid_out_vEnd                  :   OUT   std_logic;
          valid_out_valid                 :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT gaussian_conv_core
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Video_in                        :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          ctrl_hStart                     :   IN    std_logic;
          ctrl_hEnd                       :   IN    std_logic;
          ctrl_vStart                     :   IN    std_logic;
          ctrl_vEnd                       :   IN    std_logic;
          ctrl_valid                      :   IN    std_logic;
          Video_out                       :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          valid_out_hStart                :   OUT   std_logic;
          valid_out_hEnd                  :   OUT   std_logic;
          valid_out_vStart                :   OUT   std_logic;
          valid_out_vEnd                  :   OUT   std_logic;
          valid_out_valid                 :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT sobel_horz_conv_core
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Video_in                        :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          ctrl_hStart                     :   IN    std_logic;
          ctrl_hEnd                       :   IN    std_logic;
          ctrl_vStart                     :   IN    std_logic;
          ctrl_vEnd                       :   IN    std_logic;
          ctrl_valid                      :   IN    std_logic;
          Video_out                       :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          valid_out_hStart                :   OUT   std_logic;
          valid_out_hEnd                  :   OUT   std_logic;
          valid_out_vStart                :   OUT   std_logic;
          valid_out_vEnd                  :   OUT   std_logic;
          valid_out_valid                 :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT sobel_horz_conv_core_alt
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Video_in                        :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          ctrl_valid                      :   IN    std_logic;
          Video_out                       :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
          );
  END COMPONENT;

  COMPONENT sqrt_threshold
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Video_in_horz                   :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          ctrl_hStart                     :   IN    std_logic;
          ctrl_hEnd                       :   IN    std_logic;
          ctrl_vStart                     :   IN    std_logic;
          ctrl_vEnd                       :   IN    std_logic;
          ctrl_valid                      :   IN    std_logic;
          Video_in_vert                   :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          Video_out                       :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          valid_out_hStart                :   OUT   std_logic;
          valid_out_hEnd                  :   OUT   std_logic;
          valid_out_vStart                :   OUT   std_logic;
          valid_out_vEnd                  :   OUT   std_logic;
          valid_out_valid                 :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT sobel_vert_conv_core
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Video_in                        :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          ctrl_valid                      :   IN    std_logic;
          Video_out                       :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
          );
  END COMPONENT;

  COMPONENT sobel_vert_conv_core_alt
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Video_in                        :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          ctrl_hStart                     :   IN    std_logic;
          ctrl_hEnd                       :   IN    std_logic;
          ctrl_vStart                     :   IN    std_logic;
          ctrl_vEnd                       :   IN    std_logic;
          ctrl_valid                      :   IN    std_logic;
          Video_out                       :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          valid_out_hStart                :   OUT   std_logic;
          valid_out_hEnd                  :   OUT   std_logic;
          valid_out_vStart                :   OUT   std_logic;
          valid_out_vEnd                  :   OUT   std_logic;
          valid_out_valid                 :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : color_correct_core
    USE ENTITY work.color_correct_core(rtl);

  FOR ALL : just_gray_core
    USE ENTITY work.just_gray_core(rtl);

  FOR ALL : normalize_image
    USE ENTITY work.normalize_image(rtl);

  FOR ALL : gaussian_conv_core
    USE ENTITY work.gaussian_conv_core(rtl);

  FOR ALL : sobel_horz_conv_core
    USE ENTITY work.sobel_horz_conv_core(rtl);

  FOR ALL : sobel_horz_conv_core_alt
    USE ENTITY work.sobel_horz_conv_core_alt(rtl);

  FOR ALL : sqrt_threshold
    USE ENTITY work.sqrt_threshold(rtl);

  FOR ALL : sobel_vert_conv_core
    USE ENTITY work.sobel_vert_conv_core(rtl);

  FOR ALL : sobel_vert_conv_core_alt
    USE ENTITY work.sobel_vert_conv_core_alt(rtl);

  -- Signals
  SIGNAL Video_in                         : vector_of_unsigned64(0 TO 2);  -- ufix64 [3]
  SIGNAL Bit_Slice_out1                   : vector_of_unsigned8(0 TO 2);  -- uint8 [3]
  SIGNAL color_correct_core_out1_0        : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL color_correct_core_out1_1        : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL color_correct_core_out1_2        : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL color_correct_core_out2_hStart   : std_logic;
  SIGNAL color_correct_core_out2_hEnd     : std_logic;
  SIGNAL color_correct_core_out2_vStart   : std_logic;
  SIGNAL color_correct_core_out2_vEnd     : std_logic;
  SIGNAL color_correct_core_out2_valid    : std_logic;
  SIGNAL just_gray_core_out1              : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL just_gray_core_out2_hStart       : std_logic;
  SIGNAL just_gray_core_out2_hEnd         : std_logic;
  SIGNAL just_gray_core_out2_vStart       : std_logic;
  SIGNAL just_gray_core_out2_vEnd         : std_logic;
  SIGNAL just_gray_core_out2_valid        : std_logic;
  SIGNAL normalize_image_out1             : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL normalize_image_out2_hStart      : std_logic;
  SIGNAL normalize_image_out2_hEnd        : std_logic;
  SIGNAL normalize_image_out2_vStart      : std_logic;
  SIGNAL normalize_image_out2_vEnd        : std_logic;
  SIGNAL normalize_image_out2_valid       : std_logic;
  SIGNAL gaussian_conv_core_out1          : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL gaussian_conv_core_out2_hStart   : std_logic;
  SIGNAL gaussian_conv_core_out2_hEnd     : std_logic;
  SIGNAL gaussian_conv_core_out2_vStart   : std_logic;
  SIGNAL gaussian_conv_core_out2_vEnd     : std_logic;
  SIGNAL gaussian_conv_core_out2_valid    : std_logic;
  SIGNAL sobel_horz_conv_core_out1        : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL sobel_horz_conv_core_out2_hStart : std_logic;
  SIGNAL sobel_horz_conv_core_out2_hEnd   : std_logic;
  SIGNAL sobel_horz_conv_core_out2_vStart : std_logic;
  SIGNAL sobel_horz_conv_core_out2_vEnd   : std_logic;
  SIGNAL sobel_horz_conv_core_out2_valid  : std_logic;
  SIGNAL sobel_horz_conv_core_alt_out1    : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL sqrt_threshold1_out1             : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL sqrt_threshold1_out2deadOut_hStart : std_logic;
  SIGNAL sqrt_threshold1_out2deadOut_hEnd : std_logic;
  SIGNAL sqrt_threshold1_out2deadOut_vStart : std_logic;
  SIGNAL sqrt_threshold1_out2deadOut_vEnd : std_logic;
  SIGNAL sqrt_threshold1_out2deadOut_valid : std_logic;
  SIGNAL sobel_vert_conv_core_out1        : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL sobel_vert_conv_core_alt_out1    : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL sobel_vert_conv_core_alt_out2_hStart : std_logic;
  SIGNAL sobel_vert_conv_core_alt_out2_hEnd : std_logic;
  SIGNAL sobel_vert_conv_core_alt_out2_vStart : std_logic;
  SIGNAL sobel_vert_conv_core_alt_out2_vEnd : std_logic;
  SIGNAL sobel_vert_conv_core_alt_out2_valid : std_logic;
  SIGNAL sqrt_threshold2_out1             : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL sqrt_threshold2_out2_hStart      : std_logic;
  SIGNAL sqrt_threshold2_out2_hEnd        : std_logic;
  SIGNAL sqrt_threshold2_out2_vStart      : std_logic;
  SIGNAL sqrt_threshold2_out2_vEnd        : std_logic;
  SIGNAL sqrt_threshold2_out2_valid       : std_logic;
  SIGNAL sqrt_threshold_out1              : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL sqrt_threshold_out2_hStart       : std_logic;
  SIGNAL sqrt_threshold_out2_hEnd         : std_logic;
  SIGNAL sqrt_threshold_out2_vStart       : std_logic;
  SIGNAL sqrt_threshold_out2_vEnd         : std_logic;
  SIGNAL sqrt_threshold_out2_valid        : std_logic;
  SIGNAL sqrt_threshold_out1_unsigned     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL y                                : unsigned(63 DOWNTO 0);  -- ufix64

BEGIN
  u_color_correct_core : color_correct_core
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              Video_in_0 => std_logic_vector(Bit_Slice_out1(0)),  -- uint8
              Video_in_1 => std_logic_vector(Bit_Slice_out1(1)),  -- uint8
              Video_in_2 => std_logic_vector(Bit_Slice_out1(2)),  -- uint8
              ctrl_hStart => ctrl_hStart,
              ctrl_hEnd => ctrl_hEnd,
              ctrl_vStart => ctrl_vStart,
              ctrl_vEnd => ctrl_vEnd,
              ctrl_valid => ctrl_valid,
              Video_out_0 => color_correct_core_out1_0,  -- uint8
              Video_out_1 => color_correct_core_out1_1,  -- uint8
              Video_out_2 => color_correct_core_out1_2,  -- uint8
              valid_out_hStart => color_correct_core_out2_hStart,
              valid_out_hEnd => color_correct_core_out2_hEnd,
              valid_out_vStart => color_correct_core_out2_vStart,
              valid_out_vEnd => color_correct_core_out2_vEnd,
              valid_out_valid => color_correct_core_out2_valid
              );

  u_just_gray_core : just_gray_core
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              Video_in_0 => color_correct_core_out1_0,  -- uint8
              Video_in_1 => color_correct_core_out1_1,  -- uint8
              Video_in_2 => color_correct_core_out1_2,  -- uint8
              ctrl_hStart => color_correct_core_out2_hStart,
              ctrl_hEnd => color_correct_core_out2_hEnd,
              ctrl_vStart => color_correct_core_out2_vStart,
              ctrl_vEnd => color_correct_core_out2_vEnd,
              ctrl_valid => color_correct_core_out2_valid,
              Video_out => just_gray_core_out1,  -- uint8
              valid_out_hStart => just_gray_core_out2_hStart,
              valid_out_hEnd => just_gray_core_out2_hEnd,
              valid_out_vStart => just_gray_core_out2_vStart,
              valid_out_vEnd => just_gray_core_out2_vEnd,
              valid_out_valid => just_gray_core_out2_valid
              );

  u_normalize_image : normalize_image
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              Video_in => just_gray_core_out1,  -- uint8
              ctrl_hStart => just_gray_core_out2_hStart,
              ctrl_hEnd => just_gray_core_out2_hEnd,
              ctrl_vStart => just_gray_core_out2_vStart,
              ctrl_vEnd => just_gray_core_out2_vEnd,
              ctrl_valid => just_gray_core_out2_valid,
              Video_out => normalize_image_out1,  -- uint8
              valid_out_hStart => normalize_image_out2_hStart,
              valid_out_hEnd => normalize_image_out2_hEnd,
              valid_out_vStart => normalize_image_out2_vStart,
              valid_out_vEnd => normalize_image_out2_vEnd,
              valid_out_valid => normalize_image_out2_valid
              );

  u_gaussian_conv_core : gaussian_conv_core
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              Video_in => normalize_image_out1,  -- uint8
              ctrl_hStart => normalize_image_out2_hStart,
              ctrl_hEnd => normalize_image_out2_hEnd,
              ctrl_vStart => normalize_image_out2_vStart,
              ctrl_vEnd => normalize_image_out2_vEnd,
              ctrl_valid => normalize_image_out2_valid,
              Video_out => gaussian_conv_core_out1,  -- uint8
              valid_out_hStart => gaussian_conv_core_out2_hStart,
              valid_out_hEnd => gaussian_conv_core_out2_hEnd,
              valid_out_vStart => gaussian_conv_core_out2_vStart,
              valid_out_vEnd => gaussian_conv_core_out2_vEnd,
              valid_out_valid => gaussian_conv_core_out2_valid
              );

  u_sobel_horz_conv_core : sobel_horz_conv_core
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              Video_in => gaussian_conv_core_out1,  -- uint8
              ctrl_hStart => gaussian_conv_core_out2_hStart,
              ctrl_hEnd => gaussian_conv_core_out2_hEnd,
              ctrl_vStart => gaussian_conv_core_out2_vStart,
              ctrl_vEnd => gaussian_conv_core_out2_vEnd,
              ctrl_valid => gaussian_conv_core_out2_valid,
              Video_out => sobel_horz_conv_core_out1,  -- uint8
              valid_out_hStart => sobel_horz_conv_core_out2_hStart,
              valid_out_hEnd => sobel_horz_conv_core_out2_hEnd,
              valid_out_vStart => sobel_horz_conv_core_out2_vStart,
              valid_out_vEnd => sobel_horz_conv_core_out2_vEnd,
              valid_out_valid => sobel_horz_conv_core_out2_valid
              );

  u_sobel_horz_conv_core_alt : sobel_horz_conv_core_alt
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              Video_in => gaussian_conv_core_out1,  -- uint8
              ctrl_valid => gaussian_conv_core_out2_valid,
              Video_out => sobel_horz_conv_core_alt_out1  -- uint8
              );

  u_sqrt_threshold1 : sqrt_threshold
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              Video_in_horz => sobel_horz_conv_core_out1,  -- uint8
              ctrl_hStart => sobel_horz_conv_core_out2_hStart,
              ctrl_hEnd => sobel_horz_conv_core_out2_hEnd,
              ctrl_vStart => sobel_horz_conv_core_out2_vStart,
              ctrl_vEnd => sobel_horz_conv_core_out2_vEnd,
              ctrl_valid => sobel_horz_conv_core_out2_valid,
              Video_in_vert => sobel_horz_conv_core_alt_out1,  -- uint8
              Video_out => sqrt_threshold1_out1,  -- uint8
              valid_out_hStart => sqrt_threshold1_out2deadOut_hStart,
              valid_out_hEnd => sqrt_threshold1_out2deadOut_hEnd,
              valid_out_vStart => sqrt_threshold1_out2deadOut_vStart,
              valid_out_vEnd => sqrt_threshold1_out2deadOut_vEnd,
              valid_out_valid => sqrt_threshold1_out2deadOut_valid
              );

  u_sobel_vert_conv_core : sobel_vert_conv_core
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              Video_in => gaussian_conv_core_out1,  -- uint8
              ctrl_valid => gaussian_conv_core_out2_valid,
              Video_out => sobel_vert_conv_core_out1  -- uint8
              );

  u_sobel_vert_conv_core_alt : sobel_vert_conv_core_alt
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              Video_in => gaussian_conv_core_out1,  -- uint8
              ctrl_hStart => gaussian_conv_core_out2_hStart,
              ctrl_hEnd => gaussian_conv_core_out2_hEnd,
              ctrl_vStart => gaussian_conv_core_out2_vStart,
              ctrl_vEnd => gaussian_conv_core_out2_vEnd,
              ctrl_valid => gaussian_conv_core_out2_valid,
              Video_out => sobel_vert_conv_core_alt_out1,  -- uint8
              valid_out_hStart => sobel_vert_conv_core_alt_out2_hStart,
              valid_out_hEnd => sobel_vert_conv_core_alt_out2_hEnd,
              valid_out_vStart => sobel_vert_conv_core_alt_out2_vStart,
              valid_out_vEnd => sobel_vert_conv_core_alt_out2_vEnd,
              valid_out_valid => sobel_vert_conv_core_alt_out2_valid
              );

  u_sqrt_threshold2 : sqrt_threshold
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              Video_in_horz => sobel_vert_conv_core_out1,  -- uint8
              ctrl_hStart => sobel_vert_conv_core_alt_out2_hStart,
              ctrl_hEnd => sobel_vert_conv_core_alt_out2_hEnd,
              ctrl_vStart => sobel_vert_conv_core_alt_out2_vStart,
              ctrl_vEnd => sobel_vert_conv_core_alt_out2_vEnd,
              ctrl_valid => sobel_vert_conv_core_alt_out2_valid,
              Video_in_vert => sobel_vert_conv_core_alt_out1,  -- uint8
              Video_out => sqrt_threshold2_out1,  -- uint8
              valid_out_hStart => sqrt_threshold2_out2_hStart,
              valid_out_hEnd => sqrt_threshold2_out2_hEnd,
              valid_out_vStart => sqrt_threshold2_out2_vStart,
              valid_out_vEnd => sqrt_threshold2_out2_vEnd,
              valid_out_valid => sqrt_threshold2_out2_valid
              );

  u_sqrt_threshold : sqrt_threshold
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              Video_in_horz => sqrt_threshold1_out1,  -- uint8
              ctrl_hStart => sqrt_threshold2_out2_hStart,
              ctrl_hEnd => sqrt_threshold2_out2_hEnd,
              ctrl_vStart => sqrt_threshold2_out2_vStart,
              ctrl_vEnd => sqrt_threshold2_out2_vEnd,
              ctrl_valid => sqrt_threshold2_out2_valid,
              Video_in_vert => sqrt_threshold2_out1,  -- uint8
              Video_out => sqrt_threshold_out1,  -- uint8
              valid_out_hStart => sqrt_threshold_out2_hStart,
              valid_out_hEnd => sqrt_threshold_out2_hEnd,
              valid_out_vStart => sqrt_threshold_out2_vStart,
              valid_out_vEnd => sqrt_threshold_out2_vEnd,
              valid_out_valid => sqrt_threshold_out2_valid
              );

  Video_in(0) <= unsigned(Video_in_0);
  Video_in(1) <= unsigned(Video_in_1);
  Video_in(2) <= unsigned(Video_in_2);


  Bit_Slice_out1_gen: FOR k IN 0 TO 2 GENERATE
    Bit_Slice_out1(k) <= Video_in(k)(31 DOWNTO 24);
  END GENERATE Bit_Slice_out1_gen;


  sqrt_threshold_out1_unsigned <= unsigned(sqrt_threshold_out1);

  y <= sqrt_threshold_out1_unsigned & sqrt_threshold_out1_unsigned & sqrt_threshold_out1_unsigned & sqrt_threshold_out1_unsigned & sqrt_threshold_out1_unsigned & sqrt_threshold_out1_unsigned & sqrt_threshold_out1_unsigned & sqrt_threshold_out1_unsigned;

  Video_out <= std_logic_vector(y);

  ce_out <= clk_enable;

  valid_out_hStart <= sqrt_threshold_out2_hStart;

  valid_out_hEnd <= sqrt_threshold_out2_hEnd;

  valid_out_vStart <= sqrt_threshold_out2_vStart;

  valid_out_vEnd <= sqrt_threshold_out2_vEnd;

  valid_out_valid <= sqrt_threshold_out2_valid;

END rtl;

