-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\sobelFilter2024a\gaussian_conv_core.vhd
-- Created: 2025-04-09 17:29:30
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: gaussian_conv_core
-- Source Path: sobelFilter2024a/conv_core/gaussian_conv_core
-- Hierarchy Level: 1
-- Model version: 8.45
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.conv_core_pkg.ALL;

ENTITY gaussian_conv_core IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        Video_in                          :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        ctrl_hStart                       :   IN    std_logic;
        ctrl_hEnd                         :   IN    std_logic;
        ctrl_vStart                       :   IN    std_logic;
        ctrl_vEnd                         :   IN    std_logic;
        ctrl_valid                        :   IN    std_logic;
        Video_out                         :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        valid_out_hStart                  :   OUT   std_logic;
        valid_out_hEnd                    :   OUT   std_logic;
        valid_out_vStart                  :   OUT   std_logic;
        valid_out_vEnd                    :   OUT   std_logic;
        valid_out_valid                   :   OUT   std_logic
        );
END gaussian_conv_core;


ARCHITECTURE rtl OF gaussian_conv_core IS

  -- Component Declarations
  COMPONENT Subsystem1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          channel_in                      :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          coeffs_0                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          coeffs_1                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          coeffs_2                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          coeffs_3                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          coeffs_4                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          coeffs_5                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          coeffs_6                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          coeffs_7                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          coeffs_8                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          Enable                          :   IN    std_logic;
          Video_out                       :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Subsystem1
    USE ENTITY work.Subsystem1(rtl);

  -- Signals
  SIGNAL c9_Constant_out1                 : vector_of_signed16(0 TO 8);  -- sfix16_En12 [9]
  SIGNAL Constant_out1                    : matrix_of_signed16(0 TO 2, 0 TO 2);  -- sfix16_En12 [3x3]
  SIGNAL Transpose_out1                   : matrix_of_signed16(0 TO 2, 0 TO 2);  -- sfix16_En12 [3x3]
  SIGNAL Reshape_out1                     : vector_of_signed16(0 TO 8);  -- sfix16_En12 [9]
  SIGNAL valid                            : std_logic;
  SIGNAL Subsystem1_out1                  : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL alpha_reg                        : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL Delay1_out1_hStart               : std_logic;
  SIGNAL alpha_reg_1                      : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL Delay1_out1_hEnd                 : std_logic;
  SIGNAL alpha_reg_2                      : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL Delay1_out1_vStart               : std_logic;
  SIGNAL alpha_reg_3                      : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL Delay1_out1_vEnd                 : std_logic;
  SIGNAL alpha_reg_4                      : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL Delay1_out1_valid                : std_logic;

BEGIN
  -- Coefficients Constants Block

  u_Subsystem1 : Subsystem1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              channel_in => Video_in,  -- uint8
              coeffs_0 => std_logic_vector(Reshape_out1(0)),  -- sfix16_En12
              coeffs_1 => std_logic_vector(Reshape_out1(1)),  -- sfix16_En12
              coeffs_2 => std_logic_vector(Reshape_out1(2)),  -- sfix16_En12
              coeffs_3 => std_logic_vector(Reshape_out1(3)),  -- sfix16_En12
              coeffs_4 => std_logic_vector(Reshape_out1(4)),  -- sfix16_En12
              coeffs_5 => std_logic_vector(Reshape_out1(5)),  -- sfix16_En12
              coeffs_6 => std_logic_vector(Reshape_out1(6)),  -- sfix16_En12
              coeffs_7 => std_logic_vector(Reshape_out1(7)),  -- sfix16_En12
              coeffs_8 => std_logic_vector(Reshape_out1(8)),  -- sfix16_En12
              Enable => valid,
              Video_out => Subsystem1_out1  -- uint8
              );

  c9_Constant_out1(0) <= to_signed(16#0100#, 16);
  c9_Constant_out1(1) <= to_signed(16#0200#, 16);
  c9_Constant_out1(2) <= to_signed(16#0100#, 16);
  c9_Constant_out1(3) <= to_signed(16#0200#, 16);
  c9_Constant_out1(4) <= to_signed(16#0400#, 16);
  c9_Constant_out1(5) <= to_signed(16#0200#, 16);
  c9_Constant_out1(6) <= to_signed(16#0100#, 16);
  c9_Constant_out1(7) <= to_signed(16#0200#, 16);
  c9_Constant_out1(8) <= to_signed(16#0100#, 16);

  Constant_out1_gen1: FOR d1 IN 0 TO 2 GENERATE
    Constant_out1_gen: FOR d0 IN 0 TO 2 GENERATE
      Constant_out1(d0, d1) <= c9_Constant_out1(d0 + (d1 * 3));
    END GENERATE;
  END GENERATE;


  Transpose_out1_gen: FOR t_1 IN 0 TO 2 GENERATE
    Transpose_out1_gen_1: FOR t_0 IN 0 TO 2 GENERATE
      Transpose_out1(t_0, t_1) <= Constant_out1(t_1, t_0);
    END GENERATE Transpose_out1_gen_1;
  END GENERATE Transpose_out1_gen;


  Reshape_out1_gen1: FOR d1 IN 0 TO 2 GENERATE
    Reshape_out1_gen: FOR d0 IN 0 TO 2 GENERATE
      Reshape_out1(d0 + (d1 * 3)) <= Transpose_out1(d0, d1);
    END GENERATE;
  END GENERATE;

  valid <= ctrl_valid;

  c_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      alpha_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        alpha_reg(0) <= ctrl_hStart;
        alpha_reg(1) <= alpha_reg(0);
      END IF;
    END IF;
  END PROCESS c_process;

  Delay1_out1_hStart <= alpha_reg(1);

  c_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      alpha_reg_1 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        alpha_reg_1(0) <= ctrl_hEnd;
        alpha_reg_1(1) <= alpha_reg_1(0);
      END IF;
    END IF;
  END PROCESS c_1_process;

  Delay1_out1_hEnd <= alpha_reg_1(1);

  c_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      alpha_reg_2 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        alpha_reg_2(0) <= ctrl_vStart;
        alpha_reg_2(1) <= alpha_reg_2(0);
      END IF;
    END IF;
  END PROCESS c_2_process;

  Delay1_out1_vStart <= alpha_reg_2(1);

  c_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      alpha_reg_3 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        alpha_reg_3(0) <= ctrl_vEnd;
        alpha_reg_3(1) <= alpha_reg_3(0);
      END IF;
    END IF;
  END PROCESS c_3_process;

  Delay1_out1_vEnd <= alpha_reg_3(1);

  c_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      alpha_reg_4 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        alpha_reg_4(0) <= ctrl_valid;
        alpha_reg_4(1) <= alpha_reg_4(0);
      END IF;
    END IF;
  END PROCESS c_4_process;

  Delay1_out1_valid <= alpha_reg_4(1);

  Video_out <= Subsystem1_out1;

  valid_out_hStart <= Delay1_out1_hStart;

  valid_out_hEnd <= Delay1_out1_hEnd;

  valid_out_vStart <= Delay1_out1_vStart;

  valid_out_vEnd <= Delay1_out1_vEnd;

  valid_out_valid <= Delay1_out1_valid;

END rtl;

